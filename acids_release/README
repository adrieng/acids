This is a binary version of Acid Synchrone, an experimental programming language
dedicated to stream processing systems. This directory holds two executables,
asc.byte and solve.byte. The former is the compiler for the language and the
latter is a simple tool to solve scheduling problems formulated as constraints
on ultimately periodic integer words.

To run these programs you need an OCaml runtime (version 4.0 should work) and an
Integer Linear Programming solver. For the moment, only GLPK is fully supported.

Type "make" to build the standard library. The compiler should be run
from the acids_release/ directory, or be passed the path to
pervasives.aso through the -I command-line switch.

Some Acid Synchrone source code can be found in the examples/ directory.

The following features are *not* supported, and will only be available once the
second version of the compiler is done:

- Hardware (VHDL) generation
- Integrated clocking and productivity analysis (the current compiler may infer
  clock types that make programs non-productive!)
- Higher-order functions
- Code generation for data-type polymorphic functions
- Any optimization whatsoever

More generally, you can expect the compiler to be buggy and unpredictable.

Do not hesitate to e-mail me questions and remarks. The full source code will be
available soon.

-- Adrien Guatto <adrien.guatto@laposte.net>
