$$
${
(*
        run_test:
        [
                Good: "asc -check"
        ]
*)
$}

(* See {Static typing} in the manual *)

let node f () = <('1001')>

$$

let node f () = 0 when <(b)> where rec b = true

$$

let node f () = 0 when <(x y)> where rec (x, y) = (true, false)

$$

let static node f x = 0 when <(x)>

let node g () = f true

$$

let static node f x = 42 when <(x)>

let node g () = (f y, f x) where rec x = y and y = true

$$
${
(*
        run_test:
        [
                Bad 1 "Cannot unify": "asc -check"
        ]
*)
$}

let static node f x = y where rec y = x

let node g () = 0 when <(b)> where rec b = f (true fby false)

$$
${
(*
        run_test:
        [
                Bad 1 "Static variable b.*itself": "asc -check"
        ]
*)
$}

(* See {Static typing} in the manual *)

let node f () = 0 when <(b)> where rec b = b

$$
${
(*
        run_test:
        [
                Bad 1 "Could not unify D with S": "asc -check"
        ]
*)
$}

let node f () = x when <(x)=1> where
      rec x in [0, 0] = 0 fby x

$$
${
(*
        run_test:
        [
                Bad 1 "Could not unify D with S": "asc -check"
        ]
*)
$}

let node f () = true

let node g () = 0 when <(b)> where rec b = f ()

$$
${
(*
        run_test:
        [
                Good: "asc -check"
        ]
*)
$}

let static node f () = true

let node g () = 0 when <(b)> where rec b = f ()

$$
${
(*
        run_test:
        [
                Bad 1
                "Node f has static inputs but has not been declared static":
                 "asc -check"
        ]
*)
$}

let node f b = 0 when <(b)>

$$
${
(*
        run_test:
        [
                Good: "asc -check"
        ]
*)
$}

let static node f b = 0 when <(b)>

$$

let static node f (x, y) = a where
    rec <(a^2 b^x)> = y

let node g y = f (1, y)

$$
${
(*
        run_test:
        [
                Good: "asc -check"
        ]
*)
$}

let static node f (x, y) = a where
    rec <(a^2 b^x)> = y

let node g y = 1 when <(b)> where
    rec b = f (1, true)
